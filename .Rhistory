407.45*0.0264
devtools::install_github("Crparedes/masscor", build_vignettes = TRUE)
vignette(package = 'masscor')
shiny::runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp()
runApp()
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
library(propagate)
airDensity
library(propagate)
airDensity
airDensity()
library(masscor)
airDensity
shiny::runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
shiny::runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp()
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
cat(1:3)
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
runApp('Dropbox/1_titRation')
source('~/Dropbox/0-INM.V2/CBKT TUBITAK UME/Data/IC_IDMS/Vogl-TICA/UME Data/NIST981-TICA.R')
library(ggplot2)
# Certified values NIST 981
# Pb 207/206 	0.91464	pm 0.00033
# Pb 208/206 	2.1681 pm 0.0008
NIST982IC <- read.csv('~/Dropbox/0-INM.V2/CBKT TUBITAK UME/Data/IC_IDMS/Vogl-TICA/UME Data/NIST981-TICA.csv', skip = 1, nrows = 22)
head(NIST982IC)
NIST982IC$X[NIST982IC$X == ''] <- NA
NIST982IC$X <- zoo::na.locf(NIST982IC$X)
ggplot(data = NIST982IC, aes(x = ln.Ra.Rb., y = ln.Rc.Rb., color = X)) + geom_point() +
stat_smooth(method = lm, formula = 'y ~ x', fullrange = TRUE, lwd = 0.5, level = 0.95) +
geom_vline(xintercept = log(c(2.1681, 2.1681 + 0.0008, 2.1681 - 0.0008)), lwd = 0.1, lty = c(1, 3, 3)) +
geom_hline(yintercept = log(c(0.91464, 0.91464 + 0.00033, 0.91464 - 0.00033)), lwd = 0.1, lty = c(1, 3, 3))
# There is a possible outlier. Plot excluding the outlier:
NIST982IC <- NIST982IC[-22, ]
(p <- ggplot(data = NIST982IC, aes(x = ln.Ra.Rb., y = ln.Rc.Rb., color = X)) + geom_point() +
stat_smooth(method = lm, formula = 'y ~ x', fullrange = TRUE, lwd = 0.5, level = 0.95) +
geom_vline(xintercept = log(c(2.1681, 2.1681 + 0.0008, 2.1681 - 0.0008)), lwd = 0.1, lty = c(1, 3, 3)) +
geom_hline(yintercept = log(c(0.91464, 0.91464 + 0.00033, 0.91464 - 0.00033)), lwd = 0.1, lty = c(1, 3, 3)) +
xlab(label = expression(paste("ln("^208, 'Pb/'^206, 'Pb)'))) +
ylab(label = expression(paste("ln("^207, 'Pb/'^206, 'Pb)'))))
# Linear models
model1 <- lm(ln.Rc.Rb. ~ ln.Ra.Rb., data = NIST982IC[NIST982IC$X == 'HR-ICP-MS', ])
model2 <- lm(ln.Rc.Rb. ~ ln.Ra.Rb., data = NIST982IC[NIST982IC$X == 'QQQ-ICP-MS', ])
summary(model1)
summary(model2)
# Interception coordinates based on https://stackoverflow.com/a/7114961/7612904
a <- coef(model1) - coef(model2)
X_intercept <- - a[[1]] / a[[2]]
Y_intercept <- coef(model1)[[2]] * X_intercept + coef(model1)[[1]]
# Isotope ratio values
(Pb_208.206 <- exp(X_intercept))
(Pb_207.206 <- exp(Y_intercept))
# Relative Error (%)
(Pb_208.206 - 2.1681) / 2.1681 * 100
(Pb_207.206 - 0.91464) / 0.91464 * 100
# Uncertainties?
library(metRology)
(R_208.206 <- uncert(obj = expression(exp(-(b_ms2 - b_ms1) / (a_ms2 - a_ms1))),
x = list(b_ms2 = summary(model2)$coefficients[1, 1],
b_ms1 = summary(model1)$coefficients[1, 1],
a_ms2 = summary(model2)$coefficients[2, 1],
a_ms1 = summary(model1)$coefficients[2, 1]),
u = list(b_ms2 = summary(model2)$coefficients[1, 2],
b_ms1 = summary(model1)$coefficients[1, 2],
a_ms2 = summary(model2)$coefficients[2, 2],
a_ms1 = summary(model1)$coefficients[2, 2]),
cor = rbind(c(1,  0, -0.99, 0),
c(0,  1,  0, -0.99),
c(-0.99, 0,  1, 0),
c(0,  -0.99,  0, 1))))
(R_207.206 <- uncert(obj = expression(exp(a_ms1 * (-(b_ms2 - b_ms1) / (a_ms2 - a_ms1)) + b_ms1)),
x = list(b_ms2 = summary(model2)$coefficients[1, 1],
b_ms1 = summary(model1)$coefficients[1, 1],
a_ms2 = summary(model2)$coefficients[2, 1],
a_ms1 = summary(model1)$coefficients[2, 1]),
u = list(b_ms2 = summary(model2)$coefficients[1, 2],
b_ms1 = summary(model1)$coefficients[1, 2],
a_ms2 = summary(model2)$coefficients[2, 2],
a_ms1 = summary(model1)$coefficients[2, 2]),
cor = rbind(c(1,  0, -0.99, 0),
c(0,  1,  0, -0.99),
c(-0.99, 0,  1, 0),
c(0,  -0.99,  0, 1))))
(R_208.206 <- uncert(obj = expression(exp(-(b_ms2 - b_ms1) / (a_ms2 - a_ms1))),
x = list(b_ms2 = summary(model2)$coefficients[1, 1],
b_ms1 = summary(model1)$coefficients[1, 1],
a_ms2 = summary(model2)$coefficients[2, 1],
a_ms1 = summary(model1)$coefficients[2, 1]),
u = list(b_ms2 = summary(model2)$coefficients[1, 2],
b_ms1 = summary(model1)$coefficients[1, 2],
a_ms2 = summary(model2)$coefficients[2, 2],
a_ms1 = summary(model1)$coefficients[2, 2]),
cor = rbind(c(1,  0, -0.99, 0),
c(0,  1,  0, -0.99),
c(-0.99, 0,  1, 0),
c(0,  -0.99,  0, 1))))
# Other approach to obtain intercept coordinates based on https://stackoverflow.com/a/7115758/7612904
model3 <- nls(ln.Rc.Rb. ~ ifelse(X == 'HR-ICP-MS', m1 * (ln.Ra.Rb. - x0) + y0, m2 * (ln.Ra.Rb. - x0) + y0),
start = c(m1 = 0.2, m2 = 1.2, y0 = 0.77, x0 = -0.1), data = NIST982IC)
NLSparam <- summary(model3)$parameters
# If y = exp(x), u_y = y * u_x
(u_Pb_207.206 <- exp(NLSparam[3, 1]) * NLSparam[3, 2]) # u_Pb_207.206
(u_Pb_208.206 <- exp(NLSparam[4, 1]) * NLSparam[4, 2]) # u_Pb_208.206
# Metrological comparability
(Pb_208.206 - 2.1681) / sqrt((u_Pb_208.206/2)^2 + (0.0008/2)^2) / 2
# Metrological comparability
(Pb_208.206 - 2.1681) / sqrt((u_Pb_208.206)^2 + (0.0008/2)^2) / 2
(Pb_207.206 - 0.91464) / sqrt((u_Pb_207.206)^2 + (0.00033/2)^2) / 2
Pb_207.206
# Metrological comparability
(Pb_208.206 - 2.1681) / sqrt((u_Pb_208.206)^2 + (0.0008/2)^2) / 2
(Pb_207.206 - 0.91464) / sqrt((u_Pb_207.206)^2 + (0.00033/2)^2) / 2
shiny::runApp('Dropbox/2_validaR_shinyapp')
runApp('Dropbox/2_validaR_shinyapp')
runApp('Dropbox/2_validaR_shinyapp')
runApp('Dropbox/2_validaR_shinyapp')
# Tabla diseño
# DF.disenos <- data.frame('Parámetro' = Parametros,
#                          'Se evalua' = rep('', length(Parametros)), 'Diseño experimental' = rep('', length(Parametros)), 'N.réplicas' = rep('', length(Parametros)),
#                          'Observaciones' = rep('', length(Parametros)), stringsAsFactors = FALSE)
DF.disenos <- reactive(data.frame('Parámetro' = input$parametros,
'Se evalua' = rep('', length(input$Parametros)), 'Diseño experimental' = rep('', length(input$Parametros)), 'N.réplicas' = rep('', length(input$Parametros)),
'Observaciones' = rep('', length(input$Parametros)), stringsAsFactors = FALSE))
DF.disenos
DF.disenos()
# Tabla diseño
# DF.disenos <- data.frame('Parámetro' = Parametros,
#                          'Se evalua' = rep('', length(Parametros)), 'Diseño experimental' = rep('', length(Parametros)), 'N.réplicas' = rep('', length(Parametros)),
#                          'Observaciones' = rep('', length(Parametros)), stringsAsFactors = FALSE)
DF.disenos <- reactive(data.frame('Parámetro' = input$parametros,
'Se evalua' = rep('', length(input$parametros)), 'Diseño experimental' = rep('', length(input$parametros)), 'N.réplicas' = rep('', length(input$parametros)),
'Observaciones' = rep('', length(input$parametros)), stringsAsFactors = FALSE))
DF.disenos()
!is.null(input$Disenos
)
is.null(values[["DF.disenos"]])
DF.disenos <- values[["DF.disenos"]]
runApp('Dropbox/2_validaR_shinyapp')
runApp('Dropbox/2_validaR_shinyapp')
runApp('Dropbox/2_validaR_shinyapp')
runApp('Dropbox/2_validaR_shinyapp')
runApp('Dropbox/2_validaR_shinyapp')
runApp('Dropbox/2_validaR_shinyapp')
citation('XML')
install.packages('XML')
citation('XML')
shiny::runApp('Dropbox/2_masscor_shinyapp')
