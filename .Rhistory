library(png)
runApp()
modules <- with(list(pt = 'Modules/'), paste0(pt, list.files(path = pt)))
modules
sapply(c(modules), source)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shinythemes)
install.packages("shinythemes")
library(shinythemes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('shinyFiles')
library('shinyFiles')
shinyFilesExample()
runApp('~/Dropbox/2_masscor_shinyapp')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
spcs <- function(n) {return(paste0('&nbsp;', n))}
spcs(5)
spcs <- function(n) {return(rep('&nbsp;', n))}
spcs(5)
spcs <- function(n) {return(paste0(rep('&nbsp;', n)))}
spcs(5)
spcs <- function(n) {return(paste0(rep('&nbsp;', n), collapse = TRUE))}
spcs(5)
rep('&nbsp;', n)
n <- 5
rep('&nbsp;', n)
paste0(rep('&nbsp;', n))
paste0(rep('&nbsp;', n), collapse = '')
spcs <- function(n) {return(paste0(rep('&nbsp;', n), collapse = ''))}
spcs(5)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Dropbox/2_titulaR_shinyapp')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
headTags1 <- tags$li(
tags$script(HTML("$('body').addClass('fixed');")),
tags$head(
tags$style(type = "text/css", "body {padding-top: 60px; padding-bottom: 60px; background-color: #efefef;}"),
# Links
tags$style(HTML('
a {
color: #337ab7;
/*color: #2c3e50;      CSS comments  */
text-decoration: none;
}
a:hover, a:focus {
color: #000000;
text-decoration: underline;
}')),
.tab-content>.active {
display: block;
background-color: #ffffff;
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
spcs(1)
html(spcs(1))
HTML(spcs(1))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
need(input$institution)
runApp()
runApp()
runApp()
runApp()
runApp()
input$institution
need(input$institution)
5
need(input$institution)
need(input$institution)
input$institution
is.null(input$institution)
length(input$institution)
is.null(asdf)
exist(dfgs)
exists(dfgs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
numericInput(ns('d'), label = ReqField('Balance scale division:'), min = 0, value = NULL)
numericInput(ns('d'), label = ReqField('Balance scale division:'), min = 0, value = NULL)
numericInput('d', label = ReqField('Balance scale division:'), min = 0, value = NULL)
numericInput('d', label = ReqField('Balance scale division:'), min = 0)
unitsOpt <- c(Mg = 1e6, kg = 1e3, g = 1e1, mg =	1e-3, ug = 1e-6)
names(unitsOpt)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
unitsOpt
names(unitsOpt)
spcs(5)
paste0(names(unitsOpt), spcs(5))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
gc()
DF.indicationError <- data.frame(units = rep(NA, 3), massSTD = rep(NA, 3), indError = rep(NA, 3), uncert = rep(NA, 2))
DF.indicationError <- data.frame(units = rep(NA, 3), massSTD = rep(NA, 3), indError = rep(NA, 3), uncert = rep(NA, 3))
DF.indicationError
t(DF.indicationError)
rownames( = rep(NA, 2),)
t(DF.indicationError)
rownames(DF.indicationError)
data.frame(units = rep(NA, 3), rep(NA, 3), rep(NA, 3), rep(NA, 3), row.names = c('Nominal mass', 'Indication error', 'Uncertainty'))
# Table indicationerror
DF.indicationError <- data.frame(units = rep(NA, 3), '' = rep(NA, 3), rep(NA, 3), rep(NA, 3), row.names = c('Nominal mass', 'Indication error', 'Uncertainty'))
# Table indicationerror
DF.indicationError <- data.frame(units = rep(NA, 3), '.' = rep(NA, 3), rep(NA, 3), rep(NA, 3), row.names = c('Nominal mass', 'Indication error', 'Uncertainty'))
# Table indicationerror
DF.indicationError <- data.frame(units = rep(NA, 3), '.' = rep(NA, 3), '.' = rep(NA, 3), '.' = rep(NA, 3), row.names = c('Nominal mass', 'Indication error', 'Uncertainty'))
DF.indicationError
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp()
DF.indicationError
cbind(DF.indicationError, DF.indicationError)
cbind(units = rep(NA, 3), matrix(nrow = 3, ncol = 8))
data.frame(cbind(units = rep(NA, 3), matrix(nrow = 3, ncol = 8)), row.names = c('Nominal mass', 'Indication error', 'Uncertainty'))
runApp()
runApp()
runApp()
HTML(paste0(x, spcs(3)))
HTML(paste0('x', spcs(3)))
HTML('x', spcs(3))
runApp()
runApp()
shiny::runApp()
input$IndErrorPoints
DF.indicationError
DF.indicationError()
rhandsontable(DF.indicationError, stretchH = "all", colHeaders = c('Units', rep('', input$IndErrorPoints)))
rhandsontable(DF.indicationError, stretchH = "all")
!is.null(input$HT.indicationError)
runApp()
!is.null(input$HT.indicationError
)
values[["previous.analitos"]]
input$HT.indicationError
runApp()
runApp()
runApp()
# Indication error
DF.indicationError <- data.frame(cbind(Units = rep(NA, 3), matrix(nrow = 3, ncol = 10, dimnames = NULL)), row.names = c('Nominal mass', 'Indication error', 'Uncertainty'))
DF.indicationError
# Indication error
DF.indicationError <- data.frame(cbind(matrix(nrow = 3, ncol = 10), Units = rep(NA, 3)), row.names = c('Nominal mass', 'Indication error', 'Uncertainty'), )
DF.indicationError
# Indication error
DF.indicationError <- data.frame(cbind(matrix(nrow = 3, ncol = 10), Units = rep(NA, 3)), row.names = c('Nominal mass', 'Indication error', 'Uncertainty'))
DF.indicationError
unitsOpt
colnames(unitsOpt)
names(unitsOpt)
runApp()
DF.indicationError
DF.indicationError()
input$HT.indicationError
is.null(input$HT.indicationError)
values[["DF.indicationError"]]
is.null(values[["DF.indicationError"]])
DF.indicationError
runApp()
DF.indicationError
DF.indicationError()
!is.null(input$HT.indicationError)
is.null(values[["DF.indicationError"]])
(values[["DF.indicationError"]])
rhandsontable(DF.indicationError, stretchH = "all", useTypes = FALSE, colHeaders = c('Units', rep('', input$IndErrorPoint)))
input$IndErrorPoint
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Dropbox/2_masscor_shinyapp/Modules/11_manageDCC_UI.R', echo=TRUE)
source('~/Dropbox/2_masscor_shinyapp/Modules/11_manageDCC_UI.R', echo=TRUE)
source('~/Dropbox/2_masscor_shinyapp/Modules/11_manageDCC_UI.R', echo=TRUE)
source('~/Dropbox/2_masscor_shinyapp/Modules/11_manageDCC_UI.R', echo=TRUE)
source('~/Dropbox/2_masscor_shinyapp/Modules/11_manageDCC_UI.R', echo=TRUE)
source('~/Dropbox/2_masscor_shinyapp/Modules/11_manageDCC_UI.R', echo=TRUE)
numericInput(ns('ReapTestMeaPerPoints'), label = ReqField('Number of measurements per points'), min = 3, max = 20, value = 10, step = 1),
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data.frame(matrix(nrow = 5, ncol = 1), row.names = paste0('Position No. ', 1:5))
runApp()
runApp()
runApp()
runApp()
runApp()
vector(length = 5)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(ggplot2)
library(propagate)
library(titRation)
library(rsm)
PurezaPbNO3.2 <- c(0.99999, 0.00005/sqrt(3))
(x_Pb   <- propagate(expr = expression(Pb / (Pb + 2*(N + 3 * O))),
data = cbind(Pb = runif(n = 1e6, min = 207.2-0.1, max = 207.2+0.1),
N = runif(n = 1e6, min = 14.00643, max = 14.00728),
O = runif(n = 1e6, min = 15.99903, max = 15.99977)),
do.sim = TRUE, nsim = 1e5, cov = FALSE))
plot(x_Pb)
summary(x_Pb)
(v_Pb.Std  <- propagate(expr = expression(m_PbNO3.2 * w_PbNO3.2 * x_Pb / mf_Pb),
data = cbind(m_PbNO3.2 = c(0.8003, 0.0002), w_PbNO3.2 = PurezaPbNO3.2,
x_Pb = c(x_Pb$prop[1], x_Pb$prop[3]), mf_Pb= c(0.50019, 0.00003)),
do.sim = FALSE))
(c_Pb.Std   <- propagate(expr = expression(v_Pb / mw_Pb),
data = cbind(v_Pb = c(v_Pb.Std$prop[1], v_Pb.Std$prop[3]),
mw_Pb = c(207.2, 0.1/sqrt(3))),
do.sim = FALSE))
set.seed(0)
design1 <- bbd(k = 3, n0 = 3, randomize = TRUE,
coding = list(x1 ~ (V.buff - 10) / 5, x2 ~ (C.buff - 1) / 0.5, x3 ~ (V.Tart - 240) / 80))
design1
masasPb <- c(10.1050, 10.1312, 10.0953, 10.0867, 10.0801, 10.0722, 10.0586, 10.0806, 10.1082, 10.0853,
10.0728, 10.0804, 10.0757, 10.1718, 10.0808)
V.Tubbs <- c(4.8527, 4.8674, 4.8664, 4.8434, 4.8396, 4.8360, 4.8291, 4.8397, 4.8534, 4.8393,
4.8337, 4.8380, 4.8362, NA, 4.8380)
n1 <- 15
(EDTA <- masasPb[1:n1] * c_Pb.Std$prop[1] / V.Tubbs)
plot(EDTA, ylim = c(0.01002, 0.01007)); describe(EDTA); cat('\n'); describe(EDTA[-3])
outliers::grubbs.test(EDTA, type = 10)
outliers::grubbs.test(EDTA, type = 20)
outliers::grubbs.test(EDTA, type = 11)
# Correcciones para los outliers
masasPb[c(2:3, 14)] <- c(10.1939, 10.1428, 10.1718)
V.Tubbs[c(2:3, 14)] <- c(4.8938, 4.87010, 4.8834)
(EDTA <- masasPb[1:n1]  * c_Pb.Std$prop[1] / V.Tubbs * 1000)
plot(EDTA, ylim = c(10.058, 10.068), xlab = 'TitulaciÃ³n', ylab = expression(paste(C[EDTA], ' [mmol k', g^{-1}, ']')))
plot(EDTA)
describe(EDTA)#; cat('\n'); describe(EDTA[-3])
describe(EDTA[c(11, 13, 15)]) # R'eplicas
outliers::grubbs.test(EDTA, type = 10)
outliers::grubbs.test(EDTA, type = 20)
outliers::grubbs.test(EDTA, type = 11)
design1$EDTA <- EDTA
D1 <- decode.data(design1)
D1.rsm1 <- rsm(formula = EDTA ~ FO(V.buff, C.buff, V.Tart), data = D1)
summary(D1.rsm1)
describe(EDTA[1:9])
describe(EDTA)
library(ggplot2)
library(propagate)
library(titRation)
library(rsm)
PurezaPbNO3.2 <- c(0.99999, 0.00005/sqrt(3))
(x_Pb   <- propagate(expr = expression(Pb / (Pb + 2*(N + 3 * O))),
data = cbind(Pb = runif(n = 1e6, min = 207.2-0.1, max = 207.2+0.1),
N = runif(n = 1e6, min = 14.00643, max = 14.00728),
O = runif(n = 1e6, min = 15.99903, max = 15.99977)),
do.sim = TRUE, nsim = 1e5, cov = FALSE))
plot(x_Pb)
summary(x_Pb)
(v_Pb.Std  <- propagate(expr = expression(m_PbNO3.2 * w_PbNO3.2 * x_Pb / mf_Pb),
data = cbind(m_PbNO3.2 = c(0.8003, 0.0002), w_PbNO3.2 = PurezaPbNO3.2,
x_Pb = c(x_Pb$prop[1], x_Pb$prop[3]), mf_Pb= c(0.50019, 0.00003)),
do.sim = FALSE))
(c_Pb.Std   <- propagate(expr = expression(v_Pb / mw_Pb),
data = cbind(v_Pb = c(v_Pb.Std$prop[1], v_Pb.Std$prop[3]),
mw_Pb = c(207.2, 0.1/sqrt(3))),
do.sim = FALSE))
set.seed(0)
design1 <- bbd(k = 3, n0 = 3, randomize = TRUE,
coding = list(x1 ~ (V.buff - 10) / 5, x2 ~ (C.buff - 1) / 0.5, x3 ~ (V.Tart - 240) / 80))
design1
masasPb <- c(10.1050, 10.1312, 10.0953, 10.0867, 10.0801, 10.0722, 10.0586, 10.0806, 10.1082, 10.0853,
10.0728, 10.0804, 10.0757, 10.1718, 10.0808)
V.Tubbs <- c(4.8527, 4.8674, 4.8664, 4.8434, 4.8396, 4.8360, 4.8291, 4.8397, 4.8534, 4.8393,
4.8337, 4.8380, 4.8362, NA, 4.8380)
n1 <- 15
(EDTA <- masasPb[1:n1] * c_Pb.Std$prop[1] / V.Tubbs)
plot(EDTA, ylim = c(0.01002, 0.01007)); describe(EDTA); cat('\n'); describe(EDTA[-3])
outliers::grubbs.test(EDTA, type = 10)
outliers::grubbs.test(EDTA, type = 20)
outliers::grubbs.test(EDTA, type = 11)
# Correcciones para los outliers
masasPb[c(2:3, 14)] <- c(10.1939, 10.1428, 10.1718)
V.Tubbs[c(2:3, 14)] <- c(4.8938, 4.87010, 4.8834)
(EDTA <- masasPb[1:n1]  * c_Pb.Std$prop[1] / V.Tubbs * 1000)
plot(EDTA, ylim = c(10.058, 10.068), xlab = 'TitulaciÃ³n', ylab = expression(paste(C[EDTA], ' [mmol k', g^{-1}, ']')))
plot(EDTA)
describe(EDTA)#; cat('\n'); describe(EDTA[-3])
describe(EDTA[c(11, 13, 15)]) # R'eplicas
outliers::grubbs.test(EDTA, type = 10)
outliers::grubbs.test(EDTA, type = 20)
outliers::grubbs.test(EDTA, type = 11)
design1$EDTA <- EDTA
D1 <- decode.data(design1)
D1.rsm1 <- rsm(formula = EDTA ~ FO(V.buff, C.buff, V.Tart), data = D1)
summary(D1.rsm1)
describe(EDTA[1:9])
describe(EDTA)
EDTA
contour(EDTA ~ FO(V.buff, C.buff, V.Tart))
EDTA ~ FO(V.buff, C.buff, V.Tart)
FO(V.buff, C.buff, V.Tart)
contour(EDTA ~ FO(V.buff, C.buff, V.Tart), data = D1)
par(mfrow = c(2, 3))
contour(EDTA ~ FO(V.buff, C.buff, V.Tart), data = D1)
D1.rsm1 <- rsm(formula = EDTA ~ FO(V.buff, C.buff, V.Tart), data = D1)
plot(D1.rsm1)
