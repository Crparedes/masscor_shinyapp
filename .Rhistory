dataFile
NAWIDCC
NAWIDCC()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
class(NAWIDCC)
class(NAWIDCC$NAWIDCC())
class(NAWIDCC$NAWIDCC
}
class(NAWIDCC$NAWIDCC)
class(NAWIDCC$NAWIDCC())
convertMassUnitsSI(input$d, from = input$d.units, to = input$rep.units)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$d
input$d.units
input$rep.units
convertMassUnitsSI(input$d, from = input$d.units, to = input$rep.units)
as.character(convertMassUnitsSI(input$d, from = input$d.units, to = input$rep.units))
as.character(format(convertMassUnitsSI(input$d, from = input$d.units, to = input$rep.units), scientific = FALSE))
runApp()
floor(log10(0.0001)) + 1
floor(log10(0.0001)) - 1
(log10(0.0001)) - 1
(log10(0.00015)) - 1
floor(log10(0.00015)) - 1
format(0, digits = 5)
format(0, signif = 5)
format(0, signif = 5, format = 'f')
round(0, digits = 5)
format(round(0, digits = 5))
signif(4)
signif(4, digits = 4)
format(round(0.0000, digits = 5))
format(round(1e-10, digits = 5))
x <- c(0.3456789,0.0000053)
round(x, digits = 3)
round(x, digits = 3)[2]
format(round(x, digits = 3))[2]
x <- c(0, 1)
round(x, digits = 3)
x <- c(0, 1.000001)
round(x, digits = 3)
x <- c(0, 0.123456789)
round(x, digits = 3)
floor(log10(0.00015)) - 1
round(x, digits = 3)
format(round(x, digits = 3))[2]
runApp()
frmtReap()
convertMassUnitsSI(input$d, from = input$d.units, to = input$rep.units)
log10(convertMassUnitsSI(input$d, from = input$d.units, to = input$rep.units))
floor(log10(convertMassUnitsSI(input$d, from = input$d.units, to = input$rep.units))
floor(log10(convertMassUnitsSI(input$d, from = input$d.units, to = input$rep.units))) - 1)
floor(log10(convertMassUnitsSI(input$d, from = input$d.units, to = input$rep.units))) - 1
round(x, digits = (floor(log10(convertMassUnitsSI(input$d, from = input$d.units, to = input$rep.units))) - 1))
x
frmtReap <- reactive(format(round(x, digits = abs(floor(log10(convertMassUnitsSI(input$d, from = input$d.units, to = input$rep.units))) - 1)))[1])
frmtReap
frmtReap()
frmtReap <- reactive(format(round(x, digits = abs(floor(log10(convertMassUnitsSI(input$d, from = input$d.units, to = input$rep.units))))))[1])
frmtReap()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bPresAllowedUnits
runApp()
input$SourceOption == 'daCapo'
downloadButton(session$ns('DwnlDCCFile1'), 'Download masscor NAWI DCC',  style = "width:100%;")
ifelse(input$SourceOption == 'daCapo', downloadButton(session$ns('DwnlDCCFile1'), 'Download masscor NAWI DCC',  style = "width:100%;"), HTML(spcs(1)))
ifelse(input$SourceOption == 'daCapo', return(downloadButton(session$ns('DwnlDCCFile1'), 'Download masscor NAWI DCC',  style = "width:100%;")), HTML(spcs(1)))
runApp()
validColors
validColors
validColors()
runApp()
runApp()
runApp()
infoBox(title = 'Missind calibration information', color = 'red', width = 5, icon = icon('dangerous'), fill = TRUE,
value = c("It seems that no calibration certificate information has been loaded yet. Please go to the previous tab and
upload a formely created masscor NAWI DCC (a '.rds' extension file) or create a new one. Be sure to press either the button",
tags$b("Upload selected NAWI DCC"), " or ", tags$b("Finish NAWI DCC"), "accordingly.", tags$br(),
"You will be redirected automatically soon."))
runApp()
infoRDS(file = 'ExampleFiles/DCC_NAWI_Balanza Mettler Toledo XPE 205_B743848411 _ AF-07090_2020-07-14.rds')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
class(NAWIDCC$NAWIDCC()) == 'calibCert'
runApp()
runApp()
class(NAWIDCC$NAWIDCC()) != 'calibCert'
else{code}})}
try2 <- function(code, silent = TRUE) {
tryCatch(code, error = function(c) {
if (!silent) {"Error Message"}
else{code}})}
try2(0/0)
try2(sqrt(rqwer))
try2(sqrt('rqwer'))
NAWIDCC
NAWIDCC$NAWIDCC
NAWIDCC$NAWIDCC()
try(class(NAWIDCC$NAWIDCC()) != 'calibCert')
tryCatch(class(NAWIDCC$NAWIDCC()))
install.packages("berryFunctions")
berryFunctions::is.error()
berryFunctions::is.error()
berryFunctions::is.error
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
is.error(readRDS(input$NAWI.DCC_uploaded$datapath))
runApp()
library(shinyjs)
runApp()
runApp()
runApp()
runApp()
| getDefaultReactiveDomain()
getDefaultReactiveDomain()
getDefaultReactiveDomain()
#if (failedFileBolean()) {
#delay(1e5,
updateTabItems(inputId = 'MainNavTabs', selected = 'CreateUploadDCC', session = '<ShinySession>')#)
NAWIDCC$NAWIDCC()
NAWIDCC$NAWIDCC()$d
NAWIDCC$NAWIDCC()$d.units
print(NAWIDCC$NAWIDCC(), complete = TRUE)
x <- NAWIDCC$NAWIDCC()
x$d
x$orgdUnits
x$standardUnits
convertMassUnitsSI(NAWIDCC$NAWIDCC()$d, from = NAWIDCC$NAWIDCC()$standardUnits, to = NAWIDCC$NAWIDCC()$orgdUnits)
paste(c(1, 10, 100) * convertMassUnitsSI(NAWIDCC$NAWIDCC()$d, from = NAWIDCC$NAWIDCC()$standardUnits, to = NAWIDCC$NAWIDCC()$orgdUnits), NAWIDCC$NAWIDCC()$orgdUnits, sep = ' ')
paste(convertMassUnitsSI(NAWIDCC$NAWIDCC()$d, from = NAWIDCC$NAWIDCC()$standardUnits, to = NAWIDCC$NAWIDCC()$orgdUnits) * c(1, 10, 100),
NAWIDCC$NAWIDCC()$orgdUnits, sep = ' ')
NAWIDCC$NAWIDCC()$d * c(1, 10, 100)
choices.d <- reactive(convertMassUnitsSI(NAWIDCC$NAWIDCC()$d, from = NAWIDCC$NAWIDCC()$standardUnits, to = NAWIDCC$NAWIDCC()$orgdUnits) * c(1, 10, 100))
paste0(choices.d(), NAWIDCC$NAWIDCC()$orgdUnits, sep = ' ')
choices.d <- reactive(convertMassUnitsSI(NAWIDCC$NAWIDCC()$d, from = NAWIDCC$NAWIDCC()$standardUnits, to = NAWIDCC$NAWIDCC()$orgdUnits) * c(1, 10, 100))
choices.d
choices.d()
paste0(choices.d(), NAWIDCC$NAWIDCC()$orgdUnits, sep = ' ')
choices.d()
NAWIDCC$NAWIDCC()$orgdUnits
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
parent
input$MainNavTabs
runApp()
runApp()
runApp()
runApp()
runApp()
names(unitsOpt)
runApp()
runApp()
NAWIDCC$NAWIDCC()
try(isolate(DT$Conventional.mass[1:nDat] <- convMass(calibCert = NAWIDCC$NAWIDCC(), reading = DT$Indication[1:nDat], units = input$UnitsTable)))
input$UnitsTable
NAWIDCC$NAWIDCC()$orgdUnits
input$current.d.value
frmtTable1()
format(round(
DummyNumber,
digits = abs(floor(log10(convertMassUnitsSI(input$current.d.value, from = NAWIDCC$NAWIDCC()$orgdUnits, to = input$UnitsTable))))))[1]
input$current.d.value
as.numeric(input$current.d.value)
frmtTable1 <- reactive(format(round(
DummyNumber,
digits = abs(floor(log10(convertMassUnitsSI(as.numeric(input$current.d.value), from = NAWIDCC$NAWIDCC()$orgdUnits, to = input$UnitsTable))))))[1])
frmtTable1
frmtTable1()
frmtTable2 <- reactive(paste0(frmtTable1, "0", collapse = ''))
frmtTable2()
frmtTable2 <- reactive(paste0(frmtTable1(), "0", collapse = ''))
frmtTable2()
runApp()
runApp()
ConventionalMasses
ConventionalMasses()
DT$Conventional.mass
TableDat_0[["hot"]]
input$TitData
runApp()
runApp()
input$TitData
runApp()
runApp()
HOT2R(input$HT.ConventionalMass)
DT
TableDat_0[["hot"]]
DT
DT <- TableDat_0[["hot"]]
DT
nDat <- length(na.omit(DT$Indication) > 0)
nDat
try(isolate(DT$Conventional.mass[1:nDat] <- convMass(calibCert = NAWIDCC$NAWIDCC(), reading = DT$Indication[1:nDat], units = input$UnitsTable)))
DT
DT$Conventional.mass[1:nDat]
convMass(calibCert = NAWIDCC$NAWIDCC(), reading = DT$Indication[1:nDat], units = input$UnitsTable)
DT$Conventional.mass[1:nDat]
DT$Standard.uncertainty[1:nDat]
uncertConvMass(calibCert = NAWIDCC$NAWIDCC(), reading = DT$Indication[1:nDat], units = input$UnitsTable,
d = input$current.d.value, d.units = NAWIDCC$NAWIDCC()$orgdUnits)
uncertConvMass(calibCert = NAWIDCC$NAWIDCC(), reading = DT$Indication[1:nDat], units = input$UnitsTable,
d = input$current.d.value, d.units = NAWIDCC$NAWIDCC()$orgdUnits))
uncertConvMass(calibCert = NAWIDCC$NAWIDCC(), reading = DT$Indication[1:nDat], units = input$UnitsTable,
d = input$current.d.value, d.units = NAWIDCC$NAWIDCC()$orgdUnits)
NAWIDCC$NAWIDCC()$orgdUnits
input$current.d.value
input$UnitsTable
uncertConvMass(calibCert = NAWIDCC$NAWIDCC(), reading = DT$Indication[1:nDat], units = input$UnitsTable,
d = as.numeric(input$current.d.value), d.units = NAWIDCC$NAWIDCC()$orgdUnits)
runApp()
TableDat_0[["hot"]]
nDat
length(na.omit(DT$Indication) > 0)
DT <- TableDat_0[["hot"]]
DT <- TableDat_0[["hot"]]
length(na.omit(DT$Indication) > 0)
runApp()
is.na(c(NA, 0))
!is.na(c(NA, 0))
!is.na(c(NA, 0) < 0)
!is.na(c(NA, 0))
runApp()
ConventionalMasses
ConventionalMasses()
Indications()
input$HT.ConventionalMass
TableData()
renderRHandsontable(TableData())
runApp()
ConventionalMasses
ConventionalMasses()
Indications()
Indications()$Indication
Indications()$Indication[!is.na(Indications()$Indication) && Indications()$Indication > 0]
Indications()$Indication > 0
is.na(Indications()$Indication)
!is.na(Indications()$Indication)
!is.na(Indications()$Indication) && Indications()$Indication > 0
Indications()$Indication[!is.na(Indications()$Indication) && Indications()$Indication > 0]
Indications()$Indication > 0
Indications()$Indication > 0
!is.na(Indications()$Indication > 0)
Indications()$Indication[!is.na(Indications()$Indication > 0)]
Indications <- Indications()$Indication[!is.na(Indications()$Indication > 0)]
Indications
sapply(Indications, function (x) {
convMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable)})
sapply(Indications, function (x) {
uncertConvMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable,
d = as.numeric(input$current.d.value), d.units = NAWIDCC$NAWIDCC()$orgdUnits)})
ConventionalMasses <- reactive({
Indications <- Indications()$Indication[!is.na(Indications()$Indication > 0)]
correctedMasses <- sapply(Indications, function (x) {
convMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable)})
crrMassUncertai <- sapply(Indications, function (x) {
uncertConvMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable,
d = as.numeric(input$current.d.value), d.units = NAWIDCC$NAWIDCC()$orgdUnits)})
})
ConventionalMasses()
ConventionalMasses <- reactive({
Indications <- Indications()$Indication[!is.na(Indications()$Indication > 0)]
correctedMasses <- sapply(Indications, function (x) {
convMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable)})
crrMassUncertai <- sapply(Indications, function (x) {
uncertConvMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable,
d = as.numeric(input$current.d.value), d.units = NAWIDCC$NAWIDCC()$orgdUnits)})
return(data.frame(Conventional.mass = correctedMasses, Standard.uncertainty = crrMassUncertai))
})
ConventionalMasses()
TableData()
renderRHandsontable(ConventionalMasses())
runApp()
Indications()$Indication
Indications <- Indications()$Indication[!is.na(Indications()$Indication > 0)]
Indications
correctedMasses <- sapply(Indications, function (x) {
convMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable)})
correctedMasses
crrMassUncertai <- sapply(Indications, function (x) {
uncertConvMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable,
d = as.numeric(input$current.d.value), d.units = NAWIDCC$NAWIDCC()$orgdUnits)})
crrMassUncertai
ConventionalMasses
ConventionalMasses <- reactive({
Indications <- Indications()$Indication[!is.na(Indications()$Indication > 0)]
correctedMasses <- sapply(Indications, function (x) {
convMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable)})
crrMassUncertai <- sapply(Indications, function (x) {
uncertConvMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable,
d = as.numeric(input$current.d.value), d.units = NAWIDCC$NAWIDCC()$orgdUnits)})
return(data.frame(Conventional.mass = correctedMasses, Standard.uncertainty = crrMassUncertai))
})
ConventionalMasses()
frmtTable1()
frmtTable2()
runApp()
runApp()
ConventionalMasses()
Indications <- Indications()$Indication[!is.na(Indications()$Indication > 0)]
Indications
correctedMasses <- sapply(Indications, function (x) {
convMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable)})
Indications
NAWIDCC$NAWIDCC()
runApp()
runApp()
spc(3)
Indications <- Indications()$Indication[!is.na(Indications()$Indication > 0)]
Indications
runApp()
ConventionalMasses
ConventionalMasses()
format(ConventionalMasses())
format(ConventionalMasses()$Standard.uncertainty)
format(ConventionalMasses()$Standard.uncertainty, scientific = FALSE)
crrMassUncertai <- round(crrMassUncertai, 2)
crrMassUncertai <- sapply(Indications, function (x) {
uncertConvMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable,
d = as.numeric(input$current.d.value), d.units = NAWIDCC$NAWIDCC()$orgdUnits)})
Indications <- Indications()$Indication[!is.na(Indications()$Indication > 0)]
if (length(Indications) == 0) return(data.frame(matrix(nrow = 1, ncol = 2)))
correctedMasses <- sapply(Indications, function (x) {
convMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable)})
crrMassUncertai <- sapply(Indications, function (x) {
uncertConvMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable,
d = as.numeric(input$current.d.value), d.units = NAWIDCC$NAWIDCC()$orgdUnits)})
crrMassUncertai <- round(crrMassUncertai, 2)
crrMassUncertai
crrMassUncertai <- sapply(Indications, function (x) {
uncertConvMass(calibCert = NAWIDCC$NAWIDCC(), reading = x, units = input$UnitsTable,
d = as.numeric(input$current.d.value), d.units = NAWIDCC$NAWIDCC()$orgdUnits)})
crrMassUncertai <- signif(crrMassUncertai, 2)
crrMassUncertai
runApp()
runApp()
runApp()
runApp()
ConventionalMasses()
runApp()
ConventionalMasses()
NAWIDCC$NAWIDCC()
ConventionalMasses()
runApp()
frmtTable2()
frmtTable1()
install.packages("rhandsontable")
install.packages("rhandsontable")
shiny::runApp()
ConventionalMasses()
runApp()
runApp()
runApp()
runApp()
runApp()
ConventionalMasses
ConventionalMasses()
input$HT.ConvMass
is.null(input$HT.ConvMass)
!is.null(input$HT.ConvMass)
values[["ConventionalMasses"]]
values <- reactiveValues()
values[["ConventionalMasses"]]
ConventionalMasses
ConventionalMasses <- ConventionalMasses
values[["ConventionalMasses"]] <- ConventionalMasses()
values[["ConventionalMasses"]]
!is.null(input$HT.ConvMass)
is.null(values[["ConventionalMasses"]]
)
ConventionalMasses <- values[["ConventionalMasses"]]
ConventionalMasses
ConventionalMasses
!is.null(ConventionalMasses)
ConventionalMasses
rhandsontable(ConventionalMasses, rowHeaderWidth = 110, overflow = 'visible')
runApp()
values[["ConventionalMasses"]]
runApp()
values[["ConventionalMasses"]]
ConventionalMasses()
Indications()
Indications()$Indication
Indications()$
Indications()
Indications()
is.na(Indications())
runApp()
runApp()
ConventionalMasses()
values[["ConventionalMasses"]]
ConventionalMasses
ConventionalMasses <- values[["ConventionalMasses"]]
ConventionalMasses
ConventionalMasses1 <- values[["ConventionalMasses"]]
if (!is.null(ConventionalMasses1))
rhandsontable(ConventionalMasses1, overflow = 'visible') %>%
hot_col(col = 1, format = frmtTable1(), readOnly = TRUE) %>%
hot_col(col = 2, format = frmtTable2(), readOnly = TRUE)
frmtTable1()
frmtTable2()
runApp()
runApp()
htmlwidgets
htmlwidgets::JS
runApp()
runApp()
runApp()
tags$ol(tags$li('1'))
HTML(tags$ol(tags$li('1')))
tags$ol(tags$li('1'))
tags$ol(c(tags$li('1')))
htmlizado <- vector('<ol>')
htmlizado
htmlizado <- '<ol>'
spcs(1)
mat <- matrix(c(21, 1, 24, 3))
mat
mat <- matrix(c(21, 1, 24, 3), nrow = 2)
(mat <- matrix(c(21, 1, 24, 3), nrow = 2))
(mat <- matrix(c(21, 1, 24, 3), nrow = 2, byrow = TRUE))
for (i in 1:nrow(matrix)) {
c(htmlizado, '<li>', mat[i, 1], '&nbsp;&#177;&nbsp;', mat[i, 1], '</li>')
}
htmlizado <- '<ol>'
c(htmlizado, '<li>')
for (i in 1:nrow(matrix)) {
c(htmlizado, '<li>', mat[i, 1], '&nbsp;&#177;&nbsp;', mat[i, 1], '</li>')
}
mat[i, 1]
i <- 1
mat[i, 1]
c(htmlizado, '<li>', mat[i, 1], '&nbsp;&#177;&nbsp;', mat[i, 1], '</li>')
HTMELIZAME.Esta <- function(mat) {
htmlizado <- '<ol>'
for (i in 1:nrow(matrix)) {
htmlizado <- c(htmlizado, '<li>', mat[i, 1], '&nbsp;&#177;&nbsp;', mat[i, 1], '</li>')
}
htmlizado <- c(htmlizado, '</ol>')
}
c(htmlizado, '<li>', mat[i, 1], '&nbsp;&#177;&nbsp;', mat[i, 1], '</li>')
HTML(c(htmlizado, '<li>', mat[i, 1], '&nbsp;&#177;&nbsp;', mat[i, 1], '</li>'))
runApp()
runApp()
ConventionalMasses
ConventionalMasses()
HTMELIZAME.Esta(ConventionalMasses())
nrow(ConventionalMasses())
HTMELIZAME.Esta <- function(mat) {
htmlizado <- '<ol>'
for (i in 1:nrow(mat)) {
htmlizado <- c(htmlizado, '<li>', mat[i, 1], '&nbsp;&#177;&nbsp;', mat[i, 2], '</li>')
}
htmlizado <- c(htmlizado, '</ol>')
}
HTMELIZAME.Esta(ConventionalMasses())
return(htmlizado)
runApp()
format(2, digits = 2)
format(2, digits = 5)
format(2, digits = 8)
format(2, signif = 8)
runApp()
runApp()
as.numeric(input$current.d.value)
NAWIDCC$NAWIDCC()$orgdUnits
input$UnitsTable
runApp()
